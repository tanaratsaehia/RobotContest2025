#!/usr/bin/env python3
# Enhanced controller.py - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô

import serial
import sys
import threading
import time
import os

# Configuration
SERIAL_PORT = 'COM6'  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏° port ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
BAUD_RATE = 115200

class RobotController:
    def __init__(self, port, baud_rate):
        try:
            self.ser = serial.Serial(port, baud_rate, timeout=0.1, dsrdtr=False)
            self.running = True
            print(f"[Python] Connected to {port} at {baud_rate} baud")
        except Exception as e:
            print(f"[Python] Error connecting to {port}: {e}")
            sys.exit(1)
    
    def read_serial(self):
        """‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ESP32 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
        while self.running:
            try:
                if self.ser.in_waiting:
                    line = self.ser.readline().decode('utf-8', errors='ignore').strip()
                    if line:
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å robot ‡πÅ‡∏ö‡∏ö color coding
                        if "Robot Status" in line or "Position:" in line:
                            print(f"\033[92m{line}\033[0m")  # Green for status
                        elif "ERROR" in line or "EMERGENCY" in line:
                            print(f"\033[91m{line}\033[0m")  # Red for errors
                        elif "Command Received" in line:
                            print(f"\033[94m{line}\033[0m")  # Blue for commands
                        else:
                            print(line)
            except Exception as e:
                print(f"[Python] Serial read error: {e}")
                break
            
            time.sleep(0.01)  # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ CPU ‡πÄ‡∏¢‡∏≠‡∏∞
    
    def send_command(self, cmd):
        """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á ESP32"""
        try:
            self.ser.write(cmd.encode())
            print(f"[Python] Sent: '{cmd}'")
        except Exception as e:
            print(f"[Python] Send error: {e}")
    
    def close(self):
        """‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        self.running = False
        self.ser.close()

def clear_screen():
    """‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠"""
    os.system('clear' if os.name == 'posix' else 'cls')

def print_header():
    """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
    clear_screen()
    print("=" * 60)
    print("ü§ñ ROBOT AUTONOMOUS MAPPING CONTROLLER üó∫Ô∏è")
    print("=" * 60)

def print_commands():
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ"""
    print("\nüìã AVAILABLE COMMANDS:")
    print("-" * 40)
    print("üéÆ Manual Control:")
    print("  w/s/a/d  - Move robot (forward/back/left/right)")
    print("  x        - Stop robot")
    print("")
    print("üó∫Ô∏è  Autonomous Mapping:")
    print("  m        - üöÄ START MAPPING")
    print("  r        - üè† Return to start")
    print("  p        - ‚è∏Ô∏è  Pause mapping")
    print("  c        - ‚ñ∂Ô∏è  Continue mapping")
    print("")
    print("‚öôÔ∏è  Settings & Info:")
    print("  1-9      - Set speed (10%-90%)")
    print("  t        - üîç Test sensors")
    print("  M        - üìä Show mapping status")
    print("  R        - üîÑ Reset position")
    print("  h        - üìñ Show this help")
    print("  q        - üö™ Quit program")
    print("-" * 40)

def main():
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö robot
    controller = RobotController(SERIAL_PORT, BAUD_RATE)
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô serial
    serial_thread = threading.Thread(target=controller.read_serial, daemon=True)
    serial_thread.start()
    
    print_header()
    print_commands()
    print("\n‚úÖ Robot connected! Ready for commands...")
    print("üí° Tip: Press 'm' to start autonomous mapping!")
    print("\nEnter command: ", end="", flush=True)
    
    try:
        while True:
            # ‡∏£‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            try:
                if sys.stdin in select.select([sys.stdin], [], [], 0)[0]:
                    cmd = input().strip().lower()
                else:
                    time.sleep(0.1)
                    continue
            except:
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà support select
                cmd = input().strip().lower()
            
            if not cmd:
                print("Enter command: ", end="", flush=True)
                continue
            
            # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            if cmd == 'q':
                print("üëã Goodbye!")
                break
            elif cmd == 'h':
                print_header()
                print_commands()
            elif cmd == 'm':
                print("\nüöÄ Starting autonomous mapping...")
                print("ü§ñ Robot will explore and return to start automatically")
                controller.send_command('m')
            elif cmd == 'r':
                print("\nüè† Commanding robot to return to start...")
                controller.send_command('r')
            elif cmd == 'p':
                print("\n‚è∏Ô∏è  Pausing mapping...")
                controller.send_command('p')
            elif cmd == 'c':
                print("\n‚ñ∂Ô∏è  Continuing mapping...")
                controller.send_command('c')
            elif cmd == 't':
                print("\nüîç Testing all sensors...")
                controller.send_command('t')
            elif cmd == 'x':
                print("\nüõë Emergency stop!")
                controller.send_command('x')
            elif cmd in 'wasd':
                direction_names = {'w': 'forward', 'a': 'left', 's': 'backward', 'd': 'right'}
                print(f"üéÆ Moving {direction_names[cmd]}...")
                controller.send_command(cmd)
            elif cmd in '123456789':
                speed = int(cmd) * 10
                print(f"‚öôÔ∏è  Setting motor speed to {speed}%...")
                controller.send_command(cmd)
            elif cmd == 'M':
                print("\nüìä Requesting mapping status...")
                controller.send_command('M')
            elif cmd == 'R':
                print("\nüîÑ Resetting robot position...")
                controller.send_command('R')
            else:
                print(f"‚ùå Unknown command: '{cmd}' (press 'h' for help)")
            
            print("\nEnter command: ", end="", flush=True)
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
    
    finally:
        print("üîå Closing connection...")
        controller.close()

if __name__ == "__main__":
    # Import select ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà support
    try:
        import select
    except ImportError:
        select = None
    
    main()